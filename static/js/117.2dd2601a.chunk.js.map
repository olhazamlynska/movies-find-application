{"version":3,"file":"static/js/117.2dd2601a.chunk.js","mappings":"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","sources":["components/RequestError/RequestError.tsx","pages/Home/Home.styled.ts","pages/Home/Home.tsx","utils/reviewsMapper.ts","services/API.tsx","utils/actorsMapper.ts"],"sourcesContent":["import styled from 'styled-components';\n\nconst Text = styled.p`\n  color: #fe762d;\n`;\n\nconst RequestError = () => {\n  return <Text>Something went wrong. Try again...</Text>;\n};\nexport default RequestError;\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const Container = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 0 16px;\n`;\n\nexport const Title = styled.h2`\n  text-align: center;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n  gap: 30px;\n  margin-top: ${p => p.theme.space[4]}px;\n`;\n\nexport const Item = styled.li`\n  width: 275px;\n  height: 425px;\n  border-radius: ${p => p.theme.radii.normal};\n  transition-property: box-shadow, transform;\n  transition-duration: 250ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  overflow: hidden;\n  &:hover,\n  &:focus {\n    cursor: pointer;\n    transform: scale(1.03);\n    box-shadow: 2px 2px 12px 2px ${p => p.theme.colors.accentColor};\n  }\n`;\n\nexport const Poster = styled.img`\n  width: 100%;\n  height: 398px;\n  object-fit: cover;\n`;\n\nexport const LinkNav = styled(Link)`\n  width: 100%;\n  text-decoration: none;\n  color: inherit;\n  font-size: ${p => p.theme.fontSizes.m};\n  font-weight: ${p => p.theme.fontWeights.medium};\n`;\n\nexport const Name = styled.p`\n  padding-left: ${p => p.theme.space[3]}px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { getTrendingMovies, POSTER_URL } from '../../services/API';\nimport { IMovie } from '../../interfaces/AllCommonItefaces';\nimport Loader from '../../components/Loader';\nimport RequestError from '../../components/RequestError';\n\nimport { List, Item, Poster, LinkNav, Title, Name } from './Home.styled';\nconst Home = () => {\n  const [films, setfilms] = useState<IMovie[]>([]);\n  const [isFetching, setIsFetching] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const location = useLocation();\n  useEffect(() => {\n    async function fetchmovies() {\n      try {\n        setIsFetching(true);\n        const { results } = await getTrendingMovies();\n\n        setfilms(results);\n      } catch (error) {\n        if (error instanceof Error) {\n          setIsFetching(false);\n          setError(error.message);\n        }\n      } finally {\n        setIsFetching(false);\n      }\n    }\n    fetchmovies();\n  }, []);\n\n  return (\n    <>\n      {error && <RequestError />}\n      {!error && isFetching && <Loader />}\n      <Title>Tending movies today</Title>\n      <List>\n        {films.map(({ id, poster_path, title, name }) => (\n          <Item key={id}>\n            <LinkNav to={`movies/${id}`} state={{ from: location }}>\n              <Poster\n                src={\n                  poster_path\n                    ? POSTER_URL + poster_path\n                    : 'https://ik.imagekit.io/tc8jxffbcvf/default-movie-portrait_EmJUj9Tda5wa.jpg?tr=fo-auto,di-'\n                }\n                alt={title}\n                loading=\"lazy\"\n                width={250}\n              />\n              <Name>{title ? title : name}</Name>\n            </LinkNav>\n          </Item>\n        ))}\n      </List>\n    </>\n  );\n};\nexport default Home;\n","import { IReview } from '../interfaces/AllCommonItefaces';\n\nexport const reviewsMapper = (review: IReview[]): IReview[] => {\n  return review.map(({ author, content, id }) => ({\n    author,\n    content,\n    id,\n  }));\n};\n","import axios from 'axios';\nimport {\n  IActor,\n  IReview,\n  IMovieById,\n  IMoviesData,\n} from '../interfaces/AllCommonItefaces';\nimport { actorsMapper } from '../utils/actorsMapper';\nimport { reviewsMapper } from '../utils/reviewsMapper';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'd8f6c8593dac3d35659165785d083845';\n\nconst TRENDIND_PATH = '/trending/all/day';\nconst SEARCH_PATH = '/search/movie';\nconst SEARCH_ALL_INFO_PATH = '/movie';\nexport const POSTER_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport const getTrendingMovies = async (): Promise<IMoviesData> => {\n  const response = await axios.get(\n    `${TRENDIND_PATH}?page=1&api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const getMoviesByName = async (search: string): Promise<IMoviesData> => {\n  const response = await axios.get(\n    `${SEARCH_PATH}?query=${search}&api_key=${API_KEY}&language=en-US&page=1&include_adult=false`\n  );\n\n  return response.data;\n};\n\nexport const getMovieById = async (id: number): Promise<IMovieById> => {\n  const response = await axios.get(\n    `${SEARCH_ALL_INFO_PATH}/${id}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return response.data;\n};\n\nexport const getActorsById = async (id: number): Promise<IActor[]> => {\n  const response = await axios.get(\n    `${SEARCH_ALL_INFO_PATH}/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  const actor = actorsMapper(response.data.cast);\n  return actor;\n};\n\nexport const getReviewsById = async (id: number): Promise<IReview[]> => {\n  const response = await axios.get(\n    `${SEARCH_ALL_INFO_PATH}/${id}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n  const review = reviewsMapper(response.data.results);\n  return review;\n};\n","import { IActor } from '../interfaces/AllCommonItefaces';\nexport const actorsMapper = (actors: IActor[]): IActor[] => {\n  return actors.map(({ id, character, name, profile_path }) => ({\n    id,\n    character,\n    name,\n    profile_path,\n  }));\n};\n"],"names":["Text","styled","Title","List","p","theme","space","Item","radii","normal","colors","accentColor","Poster","LinkNav","Link","fontSizes","m","fontWeights","medium","Name","useState","films","setfilms","isFetching","setIsFetching","error","setError","location","useLocation","useEffect","getTrendingMovies","results","Error","message","fetchmovies","RequestError","Loader","map","id","poster_path","title","name","to","state","from","src","POSTER_URL","alt","loading","width","reviewsMapper","review","author","content","axios","API_KEY","SEARCH_ALL_INFO_PATH","response","data","getMoviesByName","search","getMovieById","getActorsById","actors","cast","actor","character","profile_path","getReviewsById"],"sourceRoot":""}